{"version":3,"sources":["utils/contants.js","components/Birthdays.jsx","api/instance.js","api/users.js","components/Employees.jsx","utils/FormatData.js","App.js","index.js"],"names":["letters","toUpperCase","split","months","BirthdaysContainer","styled","div","Birthdays","checkedUsers","users","map","user","dob","Date","sort","a","b","month","index","usersBornThisMonth","filter","getMonth","length","tmp","push","forEach","lastName","firstName","getDate","getFullYear","id","instance","axios","create","baseURL","FetchUsersList","get","EmployeesContainer","Lists","ul","ListItems","li","Input","input","Employees","useState","data","setData","JSON","parse","localStorage","getItem","setCheckedUsers","result","localeCompare","console","log","useEffect","getData","usersData","reduce","acc","letter","formatData","updateCheckedUsers","e","target","checked","find","u","setItem","stringify","Object","entries","usr","htmlFor","onChange","type","checkedUser","Wrap","GlobalStyles","createGlobalStyle","App","render","document","getElementById"],"mappings":"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","file":"static/js/main.d12569b4.chunk.js","sourcesContent":["export const letters = \"abcdefghijklmnopqrstuvwxyz\".toUpperCase().split(\"\");\nexport const months = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { months } from \"../utils/contants\";\n\nfunction Birthdays({ checkedUsers }) {\n  const users =\n    checkedUsers &&\n    checkedUsers\n      .map((user) => {\n        return { ...user, dob: new Date(user.dob) };\n      })\n      .sort((a, b) => new Date(a.dob) - new Date(b.dob));\n\n  return (\n    <BirthdaysContainer>\n      {\n        <>\n          <h2>Employees birthday</h2>\n          <ul>\n            {users &&\n              months.map((month, index) => {\n                const usersBornThisMonth = users.filter(\n                  (user) => user.dob.getMonth() === index\n                );\n                if (!usersBornThisMonth.length) return null;\n                let tmp = [];\n                tmp.push(<h3 key={`month${index}`}>{month}</h3>);\n                usersBornThisMonth.forEach((user) => {\n                  tmp.push(\n                    <li key={`birthday${user.id}`}>{`${user.lastName} ${\n                      user.firstName\n                    } - ${new Date(user.dob).getDate()} ${\n                      months[new Date(user.dob).getMonth()]\n                    }, ${new Date(user.dob).getFullYear()} year`}</li>\n                  );\n                });\n                return tmp;\n              })}\n          </ul>\n        </>\n      }\n    </BirthdaysContainer>\n  );\n}\n\nconst BirthdaysContainer = styled.div`\n  width: 35%;\n  position: relative;\n\n  @media only screen and (min-width: 768px) and (max-width: 1024px) {\n    width: 40%;\n  }\n\n  @media only screen and (max-width: 480px) {\n    width: 50%;\n  }\n\n  li {\n    list-style-type: disc;\n\n    @media only screen and (max-width: 480px) {\n      font-size: 10pt;\n    }\n  }\n\n  h2 {\n    position: relative;\n  }\n\n  h2::after {\n    content: \"\";\n    width: 300px;\n    height: 1px;\n    position: absolute;\n    background: black;\n    z-index: 9999;\n    top: 47px;\n    right: 112px;\n\n    @media only screen and (min-width: 768px) and (max-width: 1024px) {\n      right: 25px;\n      width: 250px;\n    }\n\n    @media only screen and (max-width: 480px) {\n      width: 170px;\n      right: 15px;\n      top: 30px;\n    }\n  }\n\n  &::before {\n    position: absolute;\n    content: \"\";\n    height: 90%;\n    width: 2px;\n    background: #c8c8c8;\n    top: 75px;\n\n    @media only screen and (min-width: 768px) and (max-width: 1024px) {\n      height: 90%;\n    }\n\n    @media only screen and (max-width: 480px) {\n      height: 95%;\n    }\n  }\n\n  h3 {\n    @media only screen and (max-width: 480px) {\n      font-size: 11pt;\n    }\n  }\n`;\n\nexport default Birthdays;\n","import axios from \"axios\";\n\nexport const instance = axios.create({\n  baseURL: \"https://yalantis-react-school-api.yalantis.com/api/task0\",\n});\n","import { instance } from \"./instance\";\n\nexport function FetchUsersList() {\n  return instance.get(\"/users\");\n}\n","import React, { useState, useEffect } from \"react\";\nimport Birthdays from \"./Birthdays\";\nimport styled from \"styled-components\";\nimport { formatData } from \"../utils/FormatData\";\nimport { FetchUsersList } from \"../api/users\";\n\nfunction Employees() {\n  const [data, setData] = useState([]);\n  const [checkedUsers, setCheckedUsers] = useState(\n    JSON.parse(localStorage.getItem(\"checkedUsers\")) || []\n  );\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  async function getData() {\n    try {\n      const { data } = await FetchUsersList();\n      setData(\n        data.sort((a, b) => {\n          const result = a.firstName.localeCompare(b.firstName);\n          return result !== 0 ? result : a.lastName.localeCompare(b.lastName);\n        })\n      );\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  const usersData = formatData(data),\n    updateCheckedUsers = (e) => {\n      let tmp = [...checkedUsers];\n      console.log(\"tmp\", tmp);\n\n      if (e.target.checked) {\n        tmp.push(data.find((u) => u.id === e.target.id));\n      } else {\n        tmp = tmp.filter((user) => user.id !== e.target.id);\n      }\n\n      localStorage.setItem(\"checkedUsers\", JSON.stringify(tmp));\n      setCheckedUsers(tmp);\n    };\n\n  return (\n    <>\n      {\n        <EmployeesContainer>\n          <h2>Employees</h2>\n          <Lists>\n            {Object.entries(usersData).map(([letter, users]) => {\n              return (\n                <ListItems key={letter}>\n                  <h3>{letter}</h3>\n                  <ul>\n                    {users.length > 0 ? (\n                      users.map((usr) => (\n                        <li key={usr.id}>\n                          <label htmlFor={usr.id}>\n                            {usr.lastName} {usr.firstName}\n                          </label>\n                          <Input\n                            onChange={updateCheckedUsers}\n                            id={usr.id}\n                            type=\"checkbox\"\n                            checked={checkedUsers.find(\n                              (checkedUser) => checkedUser.id === usr.id\n                            )}\n                          />\n                        </li>\n                      ))\n                    ) : (\n                      <p>-----</p>\n                    )}\n                  </ul>\n                </ListItems>\n              );\n            })}\n          </Lists>\n        </EmployeesContainer>\n      }\n\n      <Birthdays checkedUsers={checkedUsers} />\n    </>\n  );\n}\n\nconst EmployeesContainer = styled.div`\n  width: 65%;\n\n  @media only screen and (min-width: 768px) and (max-width: 1024px) {\n    width: 60%;\n  }\n\n  @media only screen and (max-width: 480px) {\n    width: 50%;\n  }\n`;\n\nconst Lists = styled.ul`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n`;\n\nconst ListItems = styled.li`\n  width: 25%;\n\n  @media only screen and (min-width: 768px) and (max-width: 1024px) {\n    width: 50%;\n  }\n\n  @media only screen and (max-width: 480px) {\n    width: 100%;\n  }\n\n  ul {\n    padding: 0;\n\n    li {\n      position: relative;\n\n      @media only screen and (max-width: 480px) {\n        font-size: 10pt;\n      }\n    }\n  }\n\n  h3 {\n    @media only screen and (max-width: 480px) {\n      font-size: 11pt;\n    }\n  }\n`;\n\nconst Input = styled.input`\n  position: absolute;\n  right: 30%;\n\n  @media only screen and (min-width: 768px) and (max-width: 1024px) {\n    right: 20%;\n  }\n\n  @media only screen and (max-width: 480px) {\n    right: 15%;\n  }\n`;\n\nexport default Employees;\n","import { letters } from \"./contants\";\n\nexport function formatData(data) {\n  return letters.reduce((acc, letter) => {\n    return {\n      ...acc,\n      [letter]: data.filter((user) => user.lastName[0] === letter),\n    };\n  }, {});\n}\n","import React from \"react\";\nimport Employees from \"./components/Employees\";\nimport styled from \"styled-components\";\nimport { createGlobalStyle } from \"styled-components\";\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyles />\n      <Wrap>\n        <Employees />\n      </Wrap>\n    </>\n  );\n}\n\nconst Wrap = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  font-family: \"PT Sans\", sans-serif;\n`;\n\nconst GlobalStyles = createGlobalStyle`        \n  ul, li {\n    list-style-type: none;\n  }\n\n  h2 {\n    text-align: center;\n    padding-bottom: 20px;\n    \n    @media only screen and (max-width: 480px) {\n      font-size: 12pt;\n    }\n  }\n`;\nexport default App;\n","import React from 'react';\nimport {render} from 'react-dom'\nimport App from './App';\n\n\nrender(<App/>, document.getElementById('root'));\n"],"sourceRoot":""}